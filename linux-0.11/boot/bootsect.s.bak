! 要加载的系统模块长度  0x1000 = 0x10000 bytes = 64kb
SYSSIZE = 0x3000

! 现在内核系统最大长度限制为 512 kb = 0x8000 clicks


! 定义全局标识符
.globl begtext, begdata, begbss, endtext, enddata, endbss

! 代码段
.text
！ 后面带冒号为标号
begtext:
！ 数据段
.data
begdata:
！ 未初始化数据段
.bss
begbss:
.text

SETUPLEN = 4				! nr of setup-sectors -- setup程序的扇区数 2KB
BOOTSEG  = 0x07c0			! original address of boot-sector bootsect的原始地址 是段地址
INITSEG  = 0x9000			! we move boot here - out of the way 将bootsect移动到9000
SETUPSEG = 0x9020			! setup starts here setup模块的起始地址 0x90200 
SYSSEG   = 0x1000			! system loaded at 0x10000 (65536). system模块加载到0x10000(64kb)处
ENDSEG   = SYSSEG + SYSSIZE		! where to stop loading 停止加载的段地址


! 根文件系统块设备号 0x000 和引导时同样的软驱设备
! 0x301 第一个硬盘的第一个分区
! 0.11 设备号的命名方式
! ROOT_DEV:	0x000 - same type of floppy as boot.
!		0x301 - first partition on first drive etc

ROOT_DEV = 0x306 ! 第2个硬盘的第1个分区

！ 迫使链接程序在生成的执行程序中包含指定的标识符


entry _start

! 移动到0x90000处
_start:
! #是立即数常量前缀
	mov	ax,#BOOTSEG ！立即数不能直接送至段寄存器
	mov	ds,ax		! ds = 0x07c0
	mov	ax,#INITSEG
	mov	es,ax		! es = 0x9000
	mov	cx,#256		! 设置移动计数值 = 256 字 = 512 字节
	sub	si,si		! 设置si = 0  源地址 ds:si
	sub	di,di		! 设置di = 0  目的地址 es:di
	rep				
	movw			! 重复执行并递减cx，直到cx为0为止 movw即 movs指令
	jmpi	go,INITSEG	! 段间跳转 INITSEG + go

! 设置堆栈 要高于setup的4个扇区，即sp指向大于(段地址=0x9000) (0x200即bootsect + 0x200 * 4 即setup的4个扇区 + 堆栈大小) 即可  

! 当BIOS将引导扇区加载到0x7c00处并把执行权交给引导程序时，ss=0x00,sp=0xfffe

go:	mov	ax,cs		! 将ds和es和ss都置成移动后代码段 即 0x9000
	mov	ds,ax
	mov	es,ax
! put stack at 0x9ff00.
	mov	ss,ax
	mov	sp,#0xFF00		! arbitrary value >>512


! 直接在bootsect后面读取setup模块，es已经为0x9000
! load the setup-sectors directly after the bootblock.
! Note that 'es' is already set up.


! 利用BIOS中断 INT 0x13

load_setup:
	mov	dx,#0x0000		! 驱动器0 磁头0
	mov	cx,#0x0002		! 磁道0 开始扇区2
	mov	bx,#0x0200		! 内存开始偏移地址 INITSEG的512字节
	mov	ax,#0x0200+SETUPLEN	! 服务2 即读扇区到内存 al为需要读的扇区数量 即4
	int	0x13			! 调用BIOS中断
	jnc	ok_load_setup		! 成功
	mov	dx,#0x0000		! 出错，则重置驱动器、磁头
	mov	ax,#0x0000		! 重置磁盘
	int	0x13
	j	load_setup		! 重新读取


! 成功读取setup后
ok_load_setup:

! 取硬盘驱动器的参数，特别是每道的扇区数，来判断磁盘类型
! Get disk drive parameters, specifically nr of sectors/track


! 调用0x13中断

	mov	dl,#0x00	! 驱动器号，此处为floppy软驱 如果是硬盘，则要置位7为1
	mov	ax,#0x0800		! AH=8 is get drive parameters
	int	0x13
	mov	ch,#0x00
	seg cs	
	mov	sectors,cx	! 对于软盘，最大磁道号不会超过256,ch已经足够表示它，因此cl的位6和7一定是0，因此cx此时是每磁道最大扇区数
	
	mov	ax,#INITSEG	! 重新设置一下es的值
	mov	es,ax


! 打印一些愚蠢的信息，通过调用BIOS 0x10中断
! Print some inane message

	! 读光标位置
	mov	ah,#0x03	
	xor	bh,bh		!光标位置保存在dx中，此处清除bh=0,即页号=0
	int	0x10		!调用中断
	
	mov	cx,#24		!共显示24个字符
	mov	bx,#0x0007		! page 0, attribute 7 (normal)
	mov	bp,#msg1
	mov	ax,#0x1301		! write string, move cursor al=01 使用bl中的属性  ah=0x13 功能号
	int	0x10



! 加载system模块到0x10000处
! ok, we've written the message, now
! we want to load the system (at 0x10000)

	mov	ax,#SYSSEG
	mov	es,ax		! segment of 0x010000
	call	read_it
	call	kill_motor

! After that we check which root-device to use. If the device is
! defined (!= 0), nothing is done and the given device is used.
! Otherwise, either /dev/PS0 (2,28) or /dev/at0 (2,8), depending
! on the number of sectors that the BIOS reports currently.

	seg cs
	mov	ax,root_dev
	cmp	ax,#0
	jne	root_defined
	seg cs
	mov	bx,sectors
	mov	ax,#0x0208		! /dev/ps0 - 1.2Mb
	cmp	bx,#15
	je	root_defined
	mov	ax,#0x021c		! /dev/PS0 - 1.44Mb
	cmp	bx,#18
	je	root_defined
undef_root:
	jmp undef_root
root_defined:
	seg cs
	mov	root_dev,ax

! after that (everyting loaded), we jump to
! the setup-routine loaded directly after
! the bootblock:

	jmpi	0,SETUPSEG

! This routine loads the system at address 0x10000, making sure
! no 64kB boundaries are crossed. We try to load it as fast as
! possible, loading whole tracks whenever we can.
!
! in:	es - starting address segment (normally 0x1000)
!
sread:	.word 1+SETUPLEN	! sectors read of current track
head:	.word 0			! current head
track:	.word 0			! current track

read_it:
	mov ax,es
	test ax,#0x0fff
die:	jne die			! es must be at 64kB boundary
	xor bx,bx		! bx is starting address within segment
rp_read:
	mov ax,es
	cmp ax,#ENDSEG		! have we loaded all yet?
	jb ok1_read
	ret
ok1_read:
	seg cs
	mov ax,sectors
	sub ax,sread
	mov cx,ax
	shl cx,#9
	add cx,bx
	jnc ok2_read
	je ok2_read
	xor ax,ax
	sub ax,bx
	shr ax,#9
ok2_read:
	call read_track
	mov cx,ax
	add ax,sread
	seg cs
	cmp ax,sectors
	jne ok3_read
	mov ax,#1
	sub ax,head
	jne ok4_read
	inc track
ok4_read:
	mov head,ax
	xor ax,ax
ok3_read:
	mov sread,ax
	shl cx,#9
	add bx,cx
	jnc rp_read
	mov ax,es
	add ax,#0x1000
	mov es,ax
	xor bx,bx
	jmp rp_read

read_track:
	push ax
	push bx
	push cx
	push dx
	mov dx,track
	mov cx,sread
	inc cx
	mov ch,dl
	mov dx,head
	mov dh,dl
	mov dl,#0
	and dx,#0x0100
	mov ah,#2
	int 0x13
	jc bad_rt
	pop dx
	pop cx
	pop bx
	pop ax
	ret
bad_rt:	mov ax,#0
	mov dx,#0
	int 0x13
	pop dx
	pop cx
	pop bx
	pop ax
	jmp read_track

!/*
! * This procedure turns off the floppy drive motor, so
! * that we enter the kernel in a known state, and
! * don't have to worry about it later.
! */
kill_motor:
	push dx
	mov dx,#0x3f2
	mov al,#0
	outb
	pop dx
	ret

sectors:
	.word 0

msg1:
	.byte 13,10
	.ascii "Loading system ..."
	.byte 13,10,13,10

.org 508
root_dev:
	.word ROOT_DEV
boot_flag:
	.word 0xAA55

.text
endtext:
.data
enddata:
.bss
endbss:
